
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class GroupTeleporterSyncModel
{
    [RealtimeProperty(50, true, true)]
    private int _changeInt;

    [RealtimeProperty(51, true, true)]
    private float _xPos;

    [RealtimeProperty(52, true, true)]
    private float _yPos;

    [RealtimeProperty(53, true, true)]
    private float _zPos;

    [RealtimeProperty(54, true, true)]
    private Vector3 _target;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class GroupTeleporterSyncModel : RealtimeModel {
    public int changeInt {
        get {
            return _changeIntProperty.value;
        }
        set {
            if (_changeIntProperty.value == value) return;
            _changeIntProperty.value = value;
            InvalidateReliableLength();
            FireChangeIntDidChange(value);
        }
    }
    
    public float xPos {
        get {
            return _xPosProperty.value;
        }
        set {
            if (_xPosProperty.value == value) return;
            _xPosProperty.value = value;
            InvalidateReliableLength();
            FireXPosDidChange(value);
        }
    }
    
    public float yPos {
        get {
            return _yPosProperty.value;
        }
        set {
            if (_yPosProperty.value == value) return;
            _yPosProperty.value = value;
            InvalidateReliableLength();
            FireYPosDidChange(value);
        }
    }
    
    public float zPos {
        get {
            return _zPosProperty.value;
        }
        set {
            if (_zPosProperty.value == value) return;
            _zPosProperty.value = value;
            InvalidateReliableLength();
            FireZPosDidChange(value);
        }
    }
    
    public UnityEngine.Vector3 target {
        get {
            return _targetProperty.value;
        }
        set {
            if (_targetProperty.value == value) return;
            _targetProperty.value = value;
            InvalidateReliableLength();
            FireTargetDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(GroupTeleporterSyncModel model, T value);
    public event PropertyChangedHandler<int> changeIntDidChange;
    public event PropertyChangedHandler<float> xPosDidChange;
    public event PropertyChangedHandler<float> yPosDidChange;
    public event PropertyChangedHandler<float> zPosDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> targetDidChange;
    
    public enum PropertyID : uint {
        ChangeInt = 50,
        XPos = 51,
        YPos = 52,
        ZPos = 53,
        Target = 54,
    }
    
    #region Properties
    
    private ReliableProperty<int> _changeIntProperty;
    
    private ReliableProperty<float> _xPosProperty;
    
    private ReliableProperty<float> _yPosProperty;
    
    private ReliableProperty<float> _zPosProperty;
    
    private ReliableProperty<UnityEngine.Vector3> _targetProperty;
    
    #endregion
    
    public GroupTeleporterSyncModel() : base(null) {
        _changeIntProperty = new ReliableProperty<int>(50, _changeInt);
        _xPosProperty = new ReliableProperty<float>(51, _xPos);
        _yPosProperty = new ReliableProperty<float>(52, _yPos);
        _zPosProperty = new ReliableProperty<float>(53, _zPos);
        _targetProperty = new ReliableProperty<UnityEngine.Vector3>(54, _target);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _changeIntProperty.UnsubscribeCallback();
        _xPosProperty.UnsubscribeCallback();
        _yPosProperty.UnsubscribeCallback();
        _zPosProperty.UnsubscribeCallback();
        _targetProperty.UnsubscribeCallback();
    }
    
    private void FireChangeIntDidChange(int value) {
        try {
            changeIntDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireXPosDidChange(float value) {
        try {
            xPosDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireYPosDidChange(float value) {
        try {
            yPosDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireZPosDidChange(float value) {
        try {
            zPosDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTargetDidChange(UnityEngine.Vector3 value) {
        try {
            targetDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _changeIntProperty.WriteLength(context);
        length += _xPosProperty.WriteLength(context);
        length += _yPosProperty.WriteLength(context);
        length += _zPosProperty.WriteLength(context);
        length += _targetProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _changeIntProperty.Write(stream, context);
        writes |= _xPosProperty.Write(stream, context);
        writes |= _yPosProperty.Write(stream, context);
        writes |= _zPosProperty.Write(stream, context);
        writes |= _targetProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.ChangeInt: {
                    changed = _changeIntProperty.Read(stream, context);
                    if (changed) FireChangeIntDidChange(changeInt);
                    break;
                }
                case (uint) PropertyID.XPos: {
                    changed = _xPosProperty.Read(stream, context);
                    if (changed) FireXPosDidChange(xPos);
                    break;
                }
                case (uint) PropertyID.YPos: {
                    changed = _yPosProperty.Read(stream, context);
                    if (changed) FireYPosDidChange(yPos);
                    break;
                }
                case (uint) PropertyID.ZPos: {
                    changed = _zPosProperty.Read(stream, context);
                    if (changed) FireZPosDidChange(zPos);
                    break;
                }
                case (uint) PropertyID.Target: {
                    changed = _targetProperty.Read(stream, context);
                    if (changed) FireTargetDidChange(target);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _changeInt = changeInt;
        _xPos = xPos;
        _yPos = yPos;
        _zPos = zPos;
        _target = target;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
