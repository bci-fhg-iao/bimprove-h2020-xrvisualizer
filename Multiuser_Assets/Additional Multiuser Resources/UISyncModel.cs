using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class UISyncModel
{
    [RealtimeProperty(6, true, true)]
    private int _uiInt;

    [RealtimeProperty(7, true, true)]
    private bool _uiBool = true;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class UISyncModel : RealtimeModel {
    public int uiInt {
        get {
            return _uiIntProperty.value;
        }
        set {
            if (_uiIntProperty.value == value) return;
            _uiIntProperty.value = value;
            InvalidateReliableLength();
            FireUiIntDidChange(value);
        }
    }
    
    public bool uiBool {
        get {
            return _uiBoolProperty.value;
        }
        set {
            if (_uiBoolProperty.value == value) return;
            _uiBoolProperty.value = value;
            InvalidateReliableLength();
            FireUiBoolDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(UISyncModel model, T value);
    public event PropertyChangedHandler<int> uiIntDidChange;
    public event PropertyChangedHandler<bool> uiBoolDidChange;
    
    public enum PropertyID : uint {
        UiInt = 6,
        UiBool = 7,
    }
    
    #region Properties
    
    private ReliableProperty<int> _uiIntProperty;
    
    private ReliableProperty<bool> _uiBoolProperty;
    
    #endregion
    
    public UISyncModel() : base(null) {
        _uiIntProperty = new ReliableProperty<int>(6, _uiInt);
        _uiBoolProperty = new ReliableProperty<bool>(7, _uiBool);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _uiIntProperty.UnsubscribeCallback();
        _uiBoolProperty.UnsubscribeCallback();
    }
    
    private void FireUiIntDidChange(int value) {
        try {
            uiIntDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireUiBoolDidChange(bool value) {
        try {
            uiBoolDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _uiIntProperty.WriteLength(context);
        length += _uiBoolProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _uiIntProperty.Write(stream, context);
        writes |= _uiBoolProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.UiInt: {
                    changed = _uiIntProperty.Read(stream, context);
                    if (changed) FireUiIntDidChange(uiInt);
                    break;
                }
                case (uint) PropertyID.UiBool: {
                    changed = _uiBoolProperty.Read(stream, context);
                    if (changed) FireUiBoolDidChange(uiBool);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _uiInt = uiInt;
        _uiBool = uiBool;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
